//线性表的类定义linelist2.h
#include<iostream.h>
#include<iomanip.h>
#include<stdio.h>
#include<malloc.h>
#include<conio.h>

#define EQUAL 1
#define OVERFLOW -1
#define LIST_INIT_SIZE 30
#define LISTINCREMENT 10

typedef struct STU{
  char name[10];
  char stuno[8];
  int age;
  int score;
}ElemType;
//线性表的动态分配顺序存储结构 
class List{
 private:
 ElemType *elem;//存储空间基址
 int length;   //当前长度
 int listsize;
//当前分配的存储容量以一数据元素存储长度为单位
 public:
  //初始化顺序表
  void init(List *);
  //删除顺序表
  void DestroyList(List &L) {free(&L);}
  //将顺序表置为空表
  void ClearList() {length=0;}
  //判断顺序表是否为空表
  bool ListEmpty()
  {if(length==0) return true;
    else return false;}
   //判断顺序表是否为满
  bool ListFull()
   {return length==listsize;}
  //决定返回表中元素pre_e的前驱
  ElemType PriorElem(ElemType cur_e,ElemType &pre_e);
  // 决定返回表中元素next_e的后继
  ElemType NextElem(ElemType cur_e,ElemType &next_e);
  //删除顺序表中第i 个元素
  bool ListDelete(int,ElemType &e);
  //遍历顺序表
  void ListTraverse();
  //返回顺序表的长度
  int ListLength();
  // 获取顺序表中第i 个元素
  void GetElem(int,ElemType *);
  // 判断顺序表两元素是否相等
  bool EqualList(ElemType *,ElemType *);
  // 判断顺序表两元素是否不等
  bool Less_EqualList(ElemType *,ElemType *);
  //顺序表的查找算法
  bool LocateElem(ElemType,int);
  //更新线性表中的给定元素
  bool UpdateList(ElemType& e,ElemType);
  //顺序表的合并算法
  void MergeList(List *,List *);
  //顺序表的插入算法
  bool ListInsert(int,ElemType);
  //顺序表的联合算法
  void UnionList(List *,List *);
  //对线性表按升序或降序输出
  void printlist(int);
};
//线性表的操作linelist2.cpp
void List::init(List *L)
{ L->elem=(ElemType *)malloc(LIST_INIT_SIZE*sizeof(ElemType));
  if(!L->elem) exit(OVERFLOW);
  L->length=0;
  L->listsize=LIST_INIT_SIZE;
}
int List::ListLength()
{ return length;}

ElemType List::PriorElem(ElemType cur_e,ElemType &pre_e)
{for(int i=0;i<length;i++)
  if(i!=0&&strcmp(cur_e.name,elem[i].name)==0)
   {pre_e=elem[i-1];return pre_e;}
 return cur_e;
}
ElemType List::NextElem(ElemType cur_e,ElemType &next_e)
{for(int i=0;i<length;i++)
  if(i!=length-1&&strcmp(cur_e.name,elem[i].name)==0)
   {next_e=elem[i+1];return next_e;}
 return cur_e;
}
bool List::ListDelete(int mark,ElemType &e)
{int i,j;
 if(ListEmpty()) return false;
 if(mark>0) {  //删除表头元素
    e=elem[0];
    for(i=1;i<length; i++)
     elem[i-1]=elem[i];}
 else //删除表尾元素
   if(mark<0) e=elem[length-1];
   else {  //删除值为e的元素
    for(i=0;i<length;i++)
     if(strcmp(elem[i].name,e.name)==0) break;
     if(i>=length) return false;
     else e=elem[i];
     for(j=i+1;j<length;j++)
      elem[j-1]=elem[j];}
 length--;
 return true;
}
void List::ListTraverse()
{for(int i=0;i<length;i++)
   {cout<<setw(8)<<elem[i].name;
    cout<<setw(10)<<elem[i].stuno;
    cout<<setw(9)<<elem[i].age;
    cout<<setw(8)<<elem[i].score<<endl;}
}
void List::GetElem(int i,ElemType *e)
{ *e=elem[i];}

bool List::EqualList(ElemType *e1,ElemType *e2)
{ if(strcmp(e1->name,e2->name)==0) return true;
  else return false;}

bool List::Less_EqualList(ElemType *e1,ElemType *e2)
{ if(strcmp(e1->name,e2->name)<=0) return true;
  else return false;
}
bool List::LocateElem(ElemType e,int type)
{ int i;
  switch (type)
    { case EQUAL:
	for(i=0;i<length;i++)
	  if(EqualList(&elem[i],&e))
	    return true;
	break;
      default:break;}
  return false;
}
bool List::UpdateList(ElemType& e,ElemType e1)
{for(int i=0;i<length;i++)
   if(strcmp(elem[i].name,e.name)==0) {
     elem[i]=e1;return true;}
 return false;
}
void List::MergeList(List *La,List *Lb)
{ ElemType *pa,*pb,*pc,*pa_last,*pb_last;
  pa=La->elem;pb=Lb->elem;
  listsize=length=La->length + Lb->length;
  pc=elem=(ElemType *)malloc(listsize*sizeof(ElemType));
  if(!elem)   exit(OVERFLOW);
  pa_last = La->elem + La->length - 1;
  pb_last = Lb->elem + Lb->length - 1;
  while(pa<=pa_last && pb<=pb_last)
    { if(Less_EqualList(pa,pb)) *pc++=*pa++;
      else *pc++=*pb++;}
  while(pa<=pa_last) *pc++=*pa++;
  while(pb<=pb_last) *pc++=*pb++;
}
bool List::ListInsert(int i,struct STU e)
{ struct STU *p,*q;
  if (i<1||i>length+1) return false;
  q=&elem[i-1];
  for(p=&elem[length-1];p>=q;--p)
    *(p+1)=*p;
  *q=e;
  ++length;
  return true;
}
void List::UnionList(List *La, List *Lb)
{ int La_len,Lb_len;
  int i;
  ElemType e;
  La_len=ListLength();Lb_len=Lb->ListLength();
  for(i=0;i<Lb_len;i++)
    {Lb->GetElem(i,&e);
     if(!LocateElem(e,EQUAL))
      ListInsert(++La_len,e);}

}
void List::printlist(int mark)
{int* b=new int[length];
 int i,k;
 cout<<"    姓名     学号       年龄    成绩\n";
 if(mark!=0) {
  for(i=0; i<length;i++) b[i]=i;
  for(i=0; i<length;i++) {k=i;
   for(int j=i+1;j<length;j++) {
    if(mark==1&&elem[b[j]].score<elem[b[k]].score) k=j;
    if(mark==-1&&elem[b[k]].score<elem[b[j]].score) k=j;}
    if(k!=i) {int x=b[i];b[i]=b[k];b[k]=x;}}
  for(int i=0;i<length;i++)
  {cout<<setw(8)<<elem[b[i]].name;
   cout<<setw(10)<<elem[b[i]].stuno;
   cout<<setw(9)<<elem[b[i]].age;
   cout<<setw(8)<<elem[b[i]].score<<endl;}}
 else {
  for(int i=0;i<length;i++)
   {cout<<setw(8)<<elem[i].name;
    cout<<setw(10)<<elem[i].stuno;
    cout<<setw(9)<<elem[i].age;
    cout<<setw(8)<<elem[i].score<<endl;}}
}
//linelist2m.cpp
#include "linelist2.h"
#include "linelist2.cpp"
main()
{ clrscr();
  cout<<"linelist2m.cpp运行结果:\n";
  ElemType e,e1,e2,e3,e4,e5,e6;
  List La,Lb,Lc;
  int k;
  cout<<"首先调用插入函数.\n";
  La.init(&La);
  strcpy(e1.name,"stu1");
  strcpy(e1.stuno,"100001");
  e1.age=22;
  e1.score=88;
  La.ListInsert(1,e1);
  strcpy(e2.name,"stu2");
  strcpy(e2.stuno,"100002");
  e2.age=21;
  e2.score=79;
  La.ListInsert(2,e2);
  strcpy(e3.name,"stu3");
  strcpy(e3.stuno,"100003");
  e3.age=19;
  e3.score=87;
  La.ListInsert(3,e3);
  La.printlist(0);
  cout<<"表La长:"<<La.ListLength()<<endl;
  getch();

  Lb.init(&Lb);
  strcpy(e4.name,"zmofun");
  strcpy(e4.stuno,"100001");
  e4.age=20;
  e4.score=94;
  Lb.ListInsert(1,e4);
  strcpy(e5.name,"bobjin");
  strcpy(e5.stuno,"100002");
  e5.age=23;
  e5.score=69;
  Lb.ListInsert(2,e5);
  strcpy(e6.name,"stu1");
  strcpy(e6.stuno,"100001");
  e6.age=22;
  e6.score=88;
  Lb.ListInsert(3,e6);
  Lb.printlist(0);
  cout<<"表Lb长:"<<Lb.ListLength()<<endl;
  getch();

  cout<<"表La与Lb合并为表Lc:\n";
  Lc.init(&Lc);
  Lc.MergeList(&La,&Lb);
  Lc.printlist(0);
  cout<<"表Lc长:"<<Lc.ListLength()<<endl;
  getch();

  cout<<"表La与Lb联合为表La:\n";
  La.UnionList(&La,&Lb);
  La.printlist(0);
  cout<<"表La长:"<<La.ListLength()<<endl;
  getch();

  k=Lc.ListDelete(-1,e);
  if(k==0) cout<<"删除失败!\n";
  else cout<<"删除成功!\n";
  cout<<"输出表Lc:\n";
  Lc.printlist(0);getch();

  strcpy(e.name,"NoName");
  La.PriorElem(e2,e);
  if(strcmp(e.name,"NoName")==0) cout<<"e2无前驱!\n";
  else cout<<"e2的前驱e.name="<<e.name<<endl;
  strcpy(e.name,"NoName");
  La.NextElem(e3,e);
  if(strcmp(e.name,"NoName")==0) cout<<"e3无后继!\n";
  else cout<<"e3的后继e.name="<<e.name<<endl;
  getch();
  cout<<"按成绩升序输出表Lc\n";
  Lc.printlist(1);getch();
  cout<<"按成绩降序输出表Lc\n";
  Lc.printlist(-1);getch();}
linelist2m.cpp运行结果:
首先调用插入函数.
    姓名     学号       年龄    成绩
    stu1    100001       22      88
    stu2    100002       21      79
    stu3    100003       19      87
表La长:3
    姓名     学号       年龄    成绩
  zmofun    100001       20      94
  bobjin    100002       23      69
    stu1    100001       22      88
表Lb长:3
表La与Lb合并为表Lc:
    姓名     学号       年龄    成绩
    stu1    100001       22      88
    stu2    100002       21      79
    stu3    100003       19      87
  zmofun    100001       20      94
  bobjin    100002       23      69
    stu1    100001       22      88
表Lc长:6
表La与Lb联合为表La:
    姓名     学号       年龄    成绩
    stu1    100001       22      88
    stu2    100002       21      79
    stu3    100003       19      87
  zmofun    100001       20      94
  bobjin    100002       23      69
表La长:5
删除成功!
输出表Lc:
    姓名     学号       年龄    成绩
    stu1    100001       22      88
    stu2    100002       21      79
    stu3    100003       19      87
  zmofun    100001       20      94
  bobjin    100002       23      69
e2的前驱e.name=stu1
e3的后继e.name=zmofun
按成绩升序输出表Lc
    姓名     学号       年龄    成绩
  bobjin    100002       23      69
    stu2    100002       21      79
    stu3    100003       19      87
    stu1    100001       22      88
  zmofun    100001       20      94
按成绩降序输出表Lc
    姓名     学号       年龄    成绩
  zmofun    100001       20      94
    stu1    100001       22      88
    stu3    100003       19      87
    stu2    100002       21      79
  bobjin    100002       23      69


