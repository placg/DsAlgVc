//最短路径(弗洛伊德算法)FloydP.h
//所有顶点之间的最短路径
void Floyd(AdjMatrix &G,int dist[6][6],int path[6][6])
//求图G中每对顶点之间的最短距离dist和最短路径的顶点序号path
{int i,j,k;
 int n=G.NumV();
 for(i=0;i<n;i++)//初始化
  for(j=0;j<n;j++)
  {dist[i][j]=G.GetWeight(i,j);
   if(i!=j&&dist[i][j]!=MaxValue) path[i][j]=i;
   else
    if(i==j) path[i][j]=0;
    else path[i][j]=-1;
  }
  for(k=0;k<n;k++)
   for(i=0;i<n;i++)
    for(j=0;j<n;j++)
    {if(dist[i][j]>(dist[i][k]+dist[k][j]))
      {dist[i][j]=dist[i][k]+dist[k][j];
       path[i][j]=path[k][j];
}}}
//最短路径FloydP.cpp
#include<iostream.h>
#include<iomanip.h>
#include "graph0.cpp"
#include "FloydP.h"
//弗洛伊德算法测试
void main()
{cout<<"FloydP.cpp运行结果:\n";
 int i,j,e=9,n=6,k2=1;
 RCW rcw[9]={{0,2,5},{0,3,30},{1,0,2},{1,4,8},
  {2,1,15},{2,5,7},{4,3,4},{5,3,10},{5,4,18}};
 AdjMatrix g(n,k2); 
 g.CreateMatrix(n,1,k2,rcw);
 g.Creatgraph(n,e,rcw);
 int dist[6][6];
 int path[6][6];
 Floyd(g,dist,path);
 for(i=0;i<n;i++)
 {cout<<"从顶点"<<g.GetValue(i)
      <<"到其他各顶点的最短距离为:\n";
  for(j=0;j<n;j++)
   cout<<"到顶点"<<g.GetValue(j)
       <<"的最短距离为:"<<dist[i][j]<<endl;
   cout<<"从顶点"<<g.GetValue(i)
       <<"到其他各顶点的最短路径的前一顶点为:\n";
   for(j=0;j<n;j++)
    if(path[i][j]!=-1)
     cout<<"到顶点"<<g.GetValue(j)<<"的前一顶点为:"
         <<g.GetValue(path[i][j])<<endl;
 }
 cin.get();cin.get();}
FloydP.cpp运行结果:
输入图的总边数:9
输入9条有向有权边的起点和终点序号及权值!
创建后的邻接矩阵:
   0  99   5  30  99  99
   2   0  99  99   8  99
  99  15   0  99  99   7
  99  99  99   0  99  99
  99  99  99   4   0  99
  99  99  99  10  18   0
从顶点A到其他各顶点的最短距离为:
到顶点A的最短距离为:0
到顶点B的最短距离为:20
到顶点C的最短距离为:5
到顶点D的最短距离为:22
到顶点E的最短距离为:28
到顶点F的最短距离为:12
从顶点A到其他各顶点的最短路径的前一顶点为:
到顶点A的前一顶点为:A
到顶点B的前一顶点为:C
到顶点C的前一顶点为:A
到顶点D的前一顶点为:F
到顶点E的前一顶点为:B
到顶点F的前一顶点为:C
从顶点B到其他各顶点的最短距离为:
到顶点A的最短距离为:2
到顶点B的最短距离为:0
到顶点C的最短距离为:7
到顶点D的最短距离为:12
到顶点E的最短距离为:8
到顶点F的最短距离为:14
从顶点B到其他各顶点的最短路径的前一顶点为:
到顶点A的前一顶点为:B
到顶点B的前一顶点为:A
到顶点C的前一顶点为:A
到顶点D的前一顶点为:E
到顶点E的前一顶点为:B
到顶点F的前一顶点为:C
从顶点C到其他各顶点的最短距离为:
到顶点A的最短距离为:17
到顶点B的最短距离为:15
到顶点C的最短距离为:0
到顶点D的最短距离为:17
到顶点E的最短距离为:23
到顶点F的最短距离为:7
从顶点C到其他各顶点的最短路径的前一顶点为:
到顶点A的前一顶点为:B
到顶点B的前一顶点为:C
到顶点C的前一顶点为:A
到顶点D的前一顶点为:F
到顶点E的前一顶点为:B
到顶点F的前一顶点为:C
从顶点D到其他各顶点的最短距离为:
到顶点A的最短距离为:99
到顶点B的最短距离为:99
到顶点C的最短距离为:99
到顶点D的最短距离为:0
到顶点E的最短距离为:99
到顶点F的最短距离为:99
从顶点D到其他各顶点的最短路径的前一顶点为:
到顶点D的前一顶点为:A
从顶点E到其他各顶点的最短距离为:
到顶点A的最短距离为:99
到顶点B的最短距离为:99
到顶点C的最短距离为:99
到顶点D的最短距离为:4
到顶点E的最短距离为:0
到顶点F的最短距离为:99
从顶点E到其他各顶点的最短路径的前一顶点为:
到顶点D的前一顶点为:E
到顶点E的前一顶点为:A
从顶点F到其他各顶点的最短距离为:
到顶点A的最短距离为:99
到顶点B的最短距离为:99
到顶点C的最短距离为:99
到顶点D的最短距离为:10
到顶点E的最短距离为:18
到顶点F的最短距离为:0
从顶点F到其他各顶点的最短路径的前一顶点为:
到顶点D的前一顶点为:F
到顶点E的前一顶点为:F
到顶点F的前一顶点为:A
